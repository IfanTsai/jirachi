statements : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement  : KEYWORD:RETURN expr?
           : KEYWORD:CONTINUE
           : KEYWORD:BREAK
           : expr

expr       : IDENTIFIER EQ expr
           : comp-expr ( ( KEYWORD:AND | KEYWORD:OR ) comp-expr )*

comp-expr  : KEYWORD:NOT comp-expr
           : arith-expr ( ( EE | LT | LTE | GT | GTE ) arith-expr )*

arith-expr : term ( (PLUS | MINUS) term )*

term       : factor ( ( MUL | DIV ) factor )*

factor     : ( PLUS | MINUS ) factor
           : power

power      : call-expr ( POW factor )*

call-expr  : atom ( LPAREN ( expr ( COMMA expr )* )? RPAREN )?

atom       : INT | FLOAT | STRING
           : IDENTIFIER                // variable access
           : LPAREN expr RPAREN
           : if-expr
           : for-expr
           : while-expr
           : func-def
           : index-expr

list-expr  : LSQUARE ( expr ( COMMA expr )* )? RSQUARE

if-expr    : KEYWORD:IF expr KEYWORD:THEN
             ( statement elif-expr | else-expr?)
             | ( NEWLINE statements KEYWORD:END | elif-expr | else-expr)

elif-expr  : KEYWORD:ELIF expr KEYWORD:THEN
             ( statement elif-expr | else-expr?)
             | ( NEWLINE statements KEYWORD:END | elif-expr | else-expr)

else-expr  : KEYWORD:ELSE
             statement
             | (NEWLINE statements KEYWORD:END)

for-expr   : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr
             (KEYWORD:STEP expr)? KEYWORD:THEN
             statement
             | (NEWLINE statements KEYWORD:END)

while-expr : KEYWORD:WHILE expr KEYWORD:THEN
             statement
             | (NEWLINE statements KEYWORD:END)

func-def   : KEYWORD:FUN IDENTIFIER?
             LPAREN ( IDENTIFIER ( COMMA IDENTIFIER )* )? RPAREN
             (ARROW expr)
             | (NEWLINE statements KEYWORD:END)

index-expr : atom LSQUARE expr RSQUARE ( EQ expr )? // a[0]
